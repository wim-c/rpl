
REM
REM Adapted from benchmark program in Creative Computing Magazine, November
REM 1982 issue.  Original code written by Gregory Yob.
REM

REM Push start jiffy clock values.
clock &

REM Perform benchmark.
doall &

REM Push stop jiffy clock values.
clock &

REM Clear the screen.
clear &

REM Print stop and start clock, both with their least significant byte first.
6 1 for
    str$ print " " print
next

REM Push three jiffy clock bytes, most significant first.
let clock def
    141 peek 142 peek 143 peek
end

REM Clear the screen.
let clear def
    REM Setup space character.
    REM ( -- spc)
    32
    
    REM Loop over 1025 (!) bytes starting at screen RAM origin.
    32768 # 1024 + % for
        REM Poke space to position.
        # fn poke
    next
    
    REM Pop space character and
    REM (spc -- )
    .
end

REM Perform the benchmark.
let doall def
    255 0 for fn doscreen & . next
end

REM Fill screen with the tos character.  Does one page too many!
REM (char -- char)
let doscreen def
    REM Initialize page address.
    REM (char -- char address)
    32768 256 - 
    
    REM Repeat five (!) times.
    4 0 for
        REM Add one page to address.
        REM (char address -- char address)
        256 +
        
        REM Duplicate nos and tos.
        REM (char address -- char address char address)
        ; ;
        
        REM Process one page of the benchmark.
        doapage &
    next
    
    REM Drop address
    REM (char address -- char)
    .
end

REM Fill a single page with a character.
REM (char address -- )
let doapage def
    REM Loop over page (one byte too many).
    REM (char address -- char)
    # 256 + % for
        REM Increment character to show.
        REM (char -- char)
        1 +
        
        REM Poke character at address.
        REM (char -- char)
        # fn poke
    next 
    
    REM Drop character and return.
    REM (char -- )
    .
end
