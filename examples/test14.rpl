
REM
REM Adapted from benchmark program in Creative Computing Magazine, November
REM 1982 issue, including several bug fixes and some restructuring.  Original
REM code written by Gregory Yob.
REM

REM Push start jiffy clock values.
clock &

REM Perform benchmark.
doall &

REM Push stop jiffy clock values.
clock &

REM Clear the screen.
clear &

REM Print stop and start clock, both with their least significant byte first.
6 1 for
    str$ print " " print
next

REM Push three jiffy clock bytes, most significant first.
let clock def
    141 peek 142 peek 143 peek
end

REM Clear the screen.
let clear def
    32768 # 999 + % for
        REM Poke space to position.
        32 fn poke
    next
end

REM Perform the benchmark.
let doall def
    255 0 for
        REM Push start character and fill four pages.
        fn doscreen &
    next
end

REM Fill screen starting from given character.
REM (char -- )
let doscreen def
    REM Initialize page address.
    REM (char -- char address)
    32768
    
    REM Repeat for four pages.
    4 1 for
        REM Duplicate nos and tos.
        REM (char address -- char address char address)
        ; ;
        
        REM Process one page of the benchmark.
        REM (char address char address -- char address)
        doapage &

        REM Advance address by one page.
        REM (char address -- char address)
        256 +
    next
    
    REM Drop char and address and return.
    REM (char address -- )
    . .
end

REM Fill a single page with a character.
REM (char address -- )
let doapage def
    REM Loop over page.
    REM (char address -- char)
    # 255 + % for
        REM Poke character at address.
        REM (char -- char)
        # fn poke

        REM Prepare next character to show.
        REM (char -- char)
        1 +
    next 
    
    REM Drop character and return.
    REM (char -- )
    .
end
