
REM display jiffy clock
showtime &

REM input time values
"Y: " print input tonumber & Y poke nl print
"X: " print input tonumber & X poke nl print
"A: " print input tonumber & A poke nl print

REM set time
settim sys

REM and show time
showtime &

let showtime def
    REM read jiffy clock in y;x;acc
    rdtim sys

    REM display
    "TIME: " print Y peek str$ print
    colon print X peek str$ print
    colon print A peek str$ print
    "  (STATUS: " print P peek chr$ print ")\13" print

    let colon ":"
end

let tonumber def
    0 ; peek 1 for
        10 *                REM str$ res
        % 1 +               REM res str$
        % ; peek $f and +   REM str$ res
    next
    % .
end

REM Newline string.
let nl "\13"

REM Kernal entries to set and read the jiffy clock in y;x;acc.
let settim: $ffdb end
let rdtim: $ffde end

REM Locations where SYS gets and stores the registers and status flags.
let registers: $30c end
let A: registers end
let X: registers 1 + end
let Y: registers 2 + end
let P: registers 3 + end
