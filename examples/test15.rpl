
REM
REM Adapted from benchmark program in Creative Computing Magazine, November
REM 1982 issue.  Changed from original benchmark by filling a  screen of 1000
REM characters at once, instead of per page for a total of 1024 characters.
REM Original code written by Gregory Yob.
REM

REM Push start jiffy clock values.
clock &

REM Perform benchmark.
doall &

REM Push stop jiffy clock values.
clock &

REM Clear the screen.
clear &

REM Print stop and start clock, both with their least significant byte first.
6 1 for
    str$ print " " print
next

REM Push three jiffy clock bytes, most significant first.
let clock def
    141 peek 142 peek 143 peek
end

REM Clear the screen.
let clear def
    32768 # 999 + % for
        REM Poke space to position.
        32 fn poke
    next
end

REM Perform the benchmark.
let doall def
    255 0 for
        REM Push start character and fill four pages.
        fn doscreen &
    next
end

REM Fill screen starting from given character.
REM (char -- )
let doscreen def
    REM Loop over one screen.
    REM (char -- char)
    32768 # 999 + % for
        REM Poke character to screen.
        # fn poke

        REM Prepare next character to show.
        1 +
    next

    REM Pop character and return
    REM (char -- )
    .
end
