
REM jump to the main dispatch loop.
dispatch_loop goto

REM the main dispatch loop that triggers all the game logic.
let dispatch_loop def
    REM first check if there is a mode request.
    mode_request @ dup if
        REM if so, then clear the mode request and execute the requested
        REM mode activation.
        0 mode_request !
        gosub
    REM otherwise, check for key presses.
    else drop get dup cont if
        REM call the current key handler to select an action.
        key_handler @ gosub

        REM execute action and drop key code.
        gosub drop
    else
        REM no key pressed.  Execute the idle handler.
        drop idle_handler @ gosub
    end

    REM repeat indefinitely.
    dispatch_loop goto
end

REM no operation action.
let noop def
    return
end

REM set the requested mode.
REM (mode - )
let set_mode_request def
    mode_request !
end

REM enter edit mode.
let edit_mode def
    REM let edit mode handle key presses.
    process_edit_key key_handler !
    noop idle_handler !

    REM display the edit mode banner.
    REM "EDIT | SPC CRSR (G)O (S)TEP (C)LR (R)ND"
    "\5\4\9\20 \66 \19\16\3 \3\18\19\18 (\7)\15 (\19)\20\5\16 (\3)\12\18 (\18)\14\4" show_banner gosub

    REM show the cross hair.
    show_cross_hair gosub

    REM handle key presses in edit mode.
    let process_edit_key def
        dup key_left = if
            move_left 1
        else dup key_h = cont if
            move_left 1
        else dup key_right = cont if
            move_right 1  
        else dup key_l = cont if
            move_right 1
        else dup key_up = cont if
            move_up 1
        else dup key_k = cont if
            move_up 1
        else dup key_down = cont if
            move_down 1
        else dup key_j = cont if
            move_down 1
        else dup key_space = cont if
            toggle_cell 0
        else dup key_c = cont if
            clear_field 1
        else dup key_r = cont if
            random_field 1
        else dup key_s = cont if
            next_gen_single_step_mode set_mode_request 1
        else dup key_g = cont if
            loop_mode set_mode_request 1
        else
            noop 0
        end

        REM check if cross hair must be hidden or redrawn.
        if
            REM first hide cross hair.
            hide_cross_hair gosub

            REM then enable the cross hair after the key action has been
            REM executed and edit mode is still active.
            show_cross_hair mode_request !
        end
    end

    REM show the cross hair and save the hidden screen characters.
    let show_cross_hair def
        REM get cursor address
        cursor gosub

        REM save and replace top character by vbar
        ypos @ dup if
            over screen_width -
            dup peek save_up poke
            vbar swap poke
        end

        REM save and replace bottom character by vbar
        field_height 1 - <> if
            vbar
            over screen_width +
            dup peek save_down poke
            poke
        end

        REM save and replace left character by hbar
        xpos @ dup if
            over 1 -
            dup peek save_left poke
            hbar swap poke
        end

        REM save and replace right character by hbar
        screen_width 1 - <> if
            hbar
            over 1 +
            dup peek save_right poke
            poke
        end

        REM drop cursor address
        drop
    end

    REM hide cross hair by restoring characters.
    let hide_cross_hair def
        REM get cursor address
        cursor gosub
        
        REM restore top character.
        ypos @ dup if
            over screen_width - save_up peek swap poke
        end

        REM restore bottom character.
        field_height 1 - <> if
            save_down peek over screen_width + poke
        end
        
        REM restore left character.
        xpos @ dup if
            over 1 - save_left peek swap poke
        end

        REM restore right character.
        screen_width 1 - <> if
            save_right peek over 1 + poke
        end

        REM drop cursor address.
        drop
    end

    REM toggle cell under cursor.
    let toggle_cell def
        REM compute cell address.
        cursor gosub

        REM toggle cell content.
        dup peek space = if
            cell
        else
            space
        end

        REM store cell.
        swap poke
    end

    REM move cursor left with wrap around.
    let move_left def
        xpos @ 1 - screen_width mod xpos !
    end

    REM move cursor right with wrap around.
    let move_right def
        xpos @ 1 + screen_width mod xpos !
    end

    REM move cursor up with wrap around.
    let move_up def
        ypos @ 1 - field_height mod ypos !
    end

    REM move cursor down with wrap around.
    let move_down def
        ypos @ 1 + field_height mod ypos !
    end

    REM clear the play field.
    let clear_field def
        field_end 1 - screen for
            space fn poke
        next
    end

    REM draw a random play field
    let random_field def
        field_end 1 - screen for
            rnd 7 and 3 < if
                cell
            else
                space
            end
            fn poke
        next
    end

    REM get cursor address.
    let cursor def
        screen screen_width ypos @ * + xpos @ +
    end

    REM cross hair characters
    let vbar: $42 end
    let hbar: $40 end

    REM cursor positioning data used in edit mode.
    let position_data data
        xpos: screen_width 2 /
        ypos: field_height 2 /
    end

    REM save space for cross hair overlay.
    let cross_hair_data data
        save_down: (0)
        save_left: (0)
        save_right: (0)
        save_up: (0)
    end
end

REM enter single step mode and calculate a new generation.
let next_gen_single_step_mode def
    REM request to draw the next generation.
    draw_next_gen mode_request !

    REM then go into single step mode.
    single_step_mode gosub
end

REM enter single step mode.
let single_step_mode def
    REM let single step mode handle key presses.
    process_single_step_key key_handler !
    noop idle_handler !

    REM display the single step banner.
    REM "STEP | SPACE (G)O (E)DIT"
    "\19\20\5\16 \66 \19\16\1\3\5 (\7)\15 (\5)\4\9\20" show_banner gosub

    REM handle key presses in single step mode.
    let process_single_step_key def
        dup key_space = if
            draw_next_gen set_mode_request
        else dup key_e = cont if
            edit_mode set_mode_request
        else dup key_g = cont if
            loop_mode set_mode_request
        else
            noop
        end
    end
end

REM enter loop mode.
let loop_mode def
    REM let loop mode handle key presses.
    process_loop_key key_handler !

    REM draw next generation when idle (no key presses).
    draw_next_gen idle_handler !

    REM display the loop mode banner.
    REM " GO  | (S)TEP (E)DIT"
    " \7\15  \66 (\19)\20\5\16 (\5)\4\9\20" show_banner gosub

    REM handle key presses in loop mode.
    let process_loop_key def
        dup key_e = if
            edit_mode set_mode_request
        else dup key_s = cont if
            single_step_mode set_mode_request
        else
            noop
        end
    end
end

let show_banner def
    REM setup addres of banner line (bottom).
    banner_start swap

    REM iterate over the string.
    dup dup peek + swap 1 + for
        REM get PETSCII character.
        fn peek

        REM reverse video
        reverse_bit or

        REM put on banner and advance lineptr.
        over poke 1 +
    next

    dup banner_end = if
        REM banner completely filled.  Drop banner address.
        drop
    else
        REM fill remainder of banner with reverse video spaces.
        banner_end 1 - swap for
            reverse_space fn poke
        next
    end

    let banner_start: field_end end
    let banner_end: banner_start screen_width + end
    let reverse_bit: $80 end
    let reverse_space: $a0 end
end

REM draw the next generation of cells.
let draw_next_gen def
    REM setup buffer pointers.
    bufstart dup buf1 ! screen_width + buf2 !

    REM setup line pointer.
    screen

    REM setup initial shift state.
    first_state

    REM process first line.
    line_span for
        REM prepare next state and get cell count.
        fn next_state_and_count gosub

        REM store cell count in both buffers.
        store_count gosub
    next

    REM process end of line (as an empty cell).
    REM get the last cell count.
    cell_count_empty on

    REM store lest cell count in both buffers.
    store_count gosub

    REM let buf2 cycle back to bufstart.
    bufstart buf2 !

    REM process line 2 upto line field_height.
    field_height 2 for
        REM advance line pointer to next line.
        screen_width +

        REM setup initial shift state.
        first_state

        REM iterate over line.
        line_span for
            REM prepare next state and get cell count.
            fn next_state_and_count gosub
            
            REM add count to buffers and draw next cell.
            fn width_plus_one - add_count_and_draw gosub
        next

        REM process end of line (as an empty cell)
        REM get the last cell count.
        cell_count_empty on

        REM add last cell count to buffers and draw final cell.
        over 1 - add_count_and_draw gosub

        REM cycle buffer pointer back to bufstart position: ptr1 on even lines,
        REM ptr2 on odd lines.
        bufstart fn 1 and [buf1 buf2] on !
    next

    REM process final line (treat all cells as empty).  All count values are
    REM already in buf2.
    buf2 @ dup width_minus_one + swap for
        REM update cell based on count in buf1.
        dup fn peek draw_cell gosub

        REM move to next cell address.
        1 +
    next

    REM drop lineptr.
    drop

    REM determine initial shift state based on the first cell of the line.
    REM State is 0 if cell is empty or 1 otherwise.
    REM (lineptr - lineptr state)
    let first_state:
        dup peek space <> 1 and
    end

    REM setup line iteration pointers to iterate over colums 2 up to
    REM screen_width.
    REM (lineptr state - lineptr state endptr startptr)
    let line_span:
        over dup width_minus_one + swap 1 +
    end

    REM determine next state and cell count based on the current state and
    REM cell.  State is in tos, cell address in the loop variable.  Leaves the
    REM state selection array in nos and count in tos.
    REM (state - state count)
    let next_state_and_count def
        peek space = if
            dup next_state_empty on swap cell_count_empty on
        else
            dup next_state_active on swap cell_count_active on
        end
    end

    REM copy cell count in tos into *buf1 and *buf2.  Increment both buffer
    REM pointers.
    REM (count - )
    let store_count def
        REM duplicate cell count.
        dup

        REM store in *buf1 and increment buf1.
        buf1 fetch_inc poke

        REM store in *buf2 and increment buf2.
        buf2 fetch_inc poke
    end

    REM add cell count to buffers and update the current cell based on the
    REM total count in buf2.
    REM (count address - )
    let add_count_and_draw def
        REM swap cell count and address of cell to draw.
        swap

        REM push *buf1 and advance buf1.
        buf1 fetch_inc

        REM add count to *tos and store result in *tos.
        over over peek + swap poke

        REM push *buf2 and advance buf2.
        buf2 fetch_inc

        REM add count to *tos and store count in *tos.
        over over peek + rot rot poke
        
        REM update cell
        draw_cell gosub
    end

    REM determine the new cell based on the old cell and the cell count.  The
    REM cell address and neighbour count are in nos and tos.
    REM (address count - )
    let draw_cell def
        over peek space = if
            3 = if
                REM activate empty cell with three neighbours.
                cell swap poke
            else
                REM leave the cell empty.  Drop address.
                drop
            end
        else dup 3 <> cont if dup 4 <> cont if
            REM remove active cell if it doesn't have two or three neighbours (note
            REM that the active cell itself is also included in the count).
            drop space swap poke
        else
            REM cell remains active.  Drop address and count.
            drop drop
        end
    end

    REM gets the address stored in the variable on tos, then increments the
    REM address held in the variable.
    REM (var - address)
    let fetch_inc:
        dup @ dup 1 + rot !
    end

    REM constants used to compute cell positions relative to the start of a
    REM line.
    let width_minus_one: screen_width 1 - end
    let width_plus_one: screen_width 1 + end

    REM shift state and cell count data.
    let shift_state_data data
        next_state_empty:  0 2 0 2
        next_state_active: 1 3 1 3
        cell_count_empty:  0 1 1 2
        cell_count_active: 1 2 2 3
    end
end

REM key codes.
let key_c: $43 end
let key_e: $45 end
let key_g: $47 end
let key_h: $48 end
let key_j: $4a end
let key_k: $4b end
let key_l: $4c end
let key_r: $52 end
let key_s: $53 end

let key_down: $11 end
let key_left: $9d end
let key_right: $1d end
let key_space: $20 end
let key_up: $91 end

REM constant values for an empty cell (space) and an active cell (filled
REM ball symbol).  Used in edit mode and for calculation of a next generation.
let space: $20 end
let cell: $51 end

REM optional function references, used by the main dispatch loop.
let dispatch_data data
    mode_request: edit_mode
    key_handler: noop
    idle_handler: noop
end

REM screen constants.
let screen: $8000 end
let screen_width: 40 end
let screen_height: 25 end
let field_height: screen_height 1 - end
let field_size: field_height screen_width * end
let field_end: screen field_height screen_width * + end

REM scratch buffer and buffer pointers.
REM this *must* be the last data block in the program to ensure that the
REM bufstart label indicates the end of the program.
let buffer_data data
    buf1: 0
    buf2: 0
    bufstart:
end
