# Optimize statements in a ByteData node
push_byte_data  :  byte_data

# Skip unused marks
push_mark?  :  mark

# Include referenced code and possibly optimize.
push_gosub?  :  gosub

# Generalization of conditional branches.
branch  :>  beq bne

# Include referenced code and possibly optimize branch target.
push_branch?  :  branch

# Include referenced code and possibly optimize jump target.
push_goto?  :  goto

# Simplify zero offset goto.
goto_mark?  :  goto mark

# Simplify conditional branch over a GOTO or RETURN command.
branch_goto_mark?    :  branch goto mark
branch_return_mark?  :  branch return mark

# Tail call optimization.
gosub_return  :  gosub return

# Simplify constant conditional commands.
word_branch      :  word branch
word_eq_branch?  :  word = branch

# Operators that result in a boolean value (0 or -1).
boolop  :>  < = >

# Simplify negated conditional commands.
negate_branch  :  boolop not branch

# Commands
command  :>  ! * + - / /mod @ and beq bne boolop chr$ clr drop dup fn
command  :>  for get gosub goto input int mod new next not on or over peek
command  :>  pick poke print req return rnd rne roll rot stop str$ swap sys xor

# Constants
const  :>  expr ref word

# Commands that always divert execution flow.
final  :>  goto return stop

# Skip code following a final command.
final_command  :  final command
final_const    :  final const

# Fold identical final commands separated by a mark
final_mark?  :  final mark
