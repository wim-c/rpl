# Single node reductions
push_bytes   :  bytes
push_chars   :  chars
push_contif  :  contif
push_float   :  float
push_if      :  if
push_label   :  label
push_let     :  let
push_macro   :  macro
push_proc    :  proc
push_string  :  string
push_symbol  :  symbol
push_words   :  words

# Pseudo node to close the current scope
close_scope  :  end

# command types.
command  :>  ! # $ % & * + - . / ; < <= <> = > >= @ \ ^
command  :>  and beq bne chr$ clr contif fn for get goto input int new
command  :>  next not or peek poke print return rnd stop str$ sys

# unary operators.
unop   :>  int not

# binary operators.
binop  :>  * + - / < <= <> = > >= \ and or

# constant terms.
const  :>  expr word ref

# symmetric binary operators.
symmetric  :>  * + <> = and or

# commands that divert the control flow.
jmp  :>  goto return stop

# compile time unary operators
unop_int  :  word int
unop_not  :  word not

# compile time binary operators
binop_mul  :  word word *
binop_add  :  word word +
binop_sub  :  word word -
binop_div  :  word word /
binop_lt   :  word word <
binop_le   :  word word <=
binop_ne   :  word word <>
binop_eq   :  word word =
binop_gt   :  word word >
binop_ge   :  word word >=
binop_mod  :  word word \
binop_and  :  word word and
binop_or   :  word word or

# optimize if word is 0 or -1
and_word_const?  :  word const and
and_const_word?  :  const word and

# optimize if word is 0 or -1
or_word_const?  :  word const or
or_const_word?  :  const word or

# Short circuit conditional statements with a constant argument.
push_if_word      :  word if
push_contif_word  :  word contif

# expression extensions.  these all reduce to a single expr.
unop_expr         :  expr unop
binop_expr_expr   :  expr expr binop
binop_expr_const  :  expr const binop

# epression constructors.  these all construct a single new expr.
unop_const         :  const unop
binop_const_expr   :  const expr binop
binop_const_const  :  const const binop

# cases where dup pushes a const.
dup_word   :  word #
dup_ref    :  ref #
dup_expr   :  expr #

# check compile time rotate
rot_word?  :  word $

# swap constants
swap_const  :  const const %

# drop a constant.
drop_const  :  const .

# case where over pushes a const.
over_word  :  word const ;
over_ref   :  ref const ;
over_expr  :  expr const ;

# check compile time pick
pick_word?  :  word ^

# check for some special cases of binary operators (e.g. 1 mul)
mul_word?  :  word *
add_word?  :  word +
sub_word?  :  word -
div_word?  :  word /
and_word?  :  word and
or_word?   :  word or

# simplify negation of compare operators
lt_not   :  < not
le_not   :  <= not
eq_not   :  = not
neq_not  :  <> not
ge_not   :  >= not
gt_not   :  > not

# swap compare
lt_swap  :  % <
le_swap  :  % <=
ge_swap  :  % >=
gt_swap  :  % >

# simplify symmetric operators.
symmetric_swap  :  % symmetric

# simplify involutions.
cancel_two  :  not not
cancel_two  :  int int
cancel_two  :  % %

# use implied argument for call and goto
implied?  :  const &
implied?  :  const goto

# simplify branch, call, or goto mark
mark_jmp  :  mark jmp

# merge marks
mark_mark  :  mark mark

# check for zero offset goto
goto_mark?  :  goto mark

# tail call
call_return  :  & return

# unreachable code
jmp_skip  :  jmp command
jmp_skip  :  jmp const
jmp_skip  :  jmp if
jmp_skip  :  jmp macro

# replace beq over empty block by a bne
beq_goto?  :  beq goto mark
